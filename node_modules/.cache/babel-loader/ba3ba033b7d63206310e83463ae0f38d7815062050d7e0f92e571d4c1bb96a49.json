{"ast":null,"code":"const express = require('express');\nconst Data = require('./data');\nconst cors = require('cors');\nconst credentials = require('./credentials');\nconst api = express();\napi.use(express.json());\napi.use(cors());\nconst authenticator = (req, res, next) => {\n  const {\n    authorization\n  } = req.headers;\n  const {\n    token\n  } = credentials;\n  if (authorization === token) {\n    next();\n  } else {\n    res.status(403).json({\n      error: 'User not currently logged in.'\n    });\n  }\n};\n\n//Get All Articles Endpoint\napi.post('/api/login', (req, res) => {\n  const {\n    username,\n    password,\n    role,\n    token\n  } = credentials;\n  if (username === req.body.username && password === req.body.password) {\n    res.json({\n      username,\n      role,\n      token\n    });\n  } else {\n    res.status(403).json({\n      error: 'Incorrect username / password combination.'\n    });\n  }\n});\napi.post('/api/logout', authenticator, (req, res) => {\n  const {\n    username,\n    role,\n    token\n  } = credentials;\n  res.json({\n    username,\n    role,\n    token\n  });\n});\napi.get('/api/friends', authenticator, (req, res) => {\n  res.json(Data.getAll());\n});\n\n//Get Post Endpoint\napi.get('/api/friends/:id', authenticator, (req, res) => {\n  res.json(Data.getById(req.params.id));\n});\n\n//Create Post Endpoint\napi.post('/api/friends', authenticator, (req, res) => {\n  console.log(req.body);\n  res.json(Data.create(req.body));\n});\napi.listen(9000, () => {\n  console.log('listening on 9000');\n});","map":{"version":3,"names":["express","require","Data","cors","credentials","api","use","json","authenticator","req","res","next","authorization","headers","token","status","error","post","username","password","role","body","get","getAll","getById","params","id","console","log","create","listen"],"sources":["/Users/derya/Desktop/fsweb-s11g2-client-auth-friends/src/mocks/api.js"],"sourcesContent":["const express = require('express')\nconst Data = require('./data')\nconst cors = require('cors')\nconst credentials = require('./credentials');\n\nconst api = express()\n\napi.use(express.json())\n\napi.use(cors())\n\nconst authenticator = (req, res, next) => {\n  const { authorization } = req.headers;\n  const { token } = credentials;\n\n  if (authorization === token) {\n    next();\n  } else {\n    res.status(403).json({ error: 'User not currently logged in.' });\n  }\n}\n\n//Get All Articles Endpoint\napi.post('/api/login', (req, res) => {\n  const { username, password, role, token } = credentials;\n\n  if (username === req.body.username && password === req.body.password) {\n    res.json({\n      username,\n      role,\n      token\n    });\n  } else {\n    res.status(403).json({ error: 'Incorrect username / password combination.' });\n  }\n\n})\n\napi.post('/api/logout', authenticator, (req, res) => {\n  const { username, role, token } = credentials;\n  res.json({\n    username,\n    role,\n    token\n  })\n})\n\napi.get('/api/friends', authenticator, (req, res) => {\n  res.json(Data.getAll())\n})\n\n//Get Post Endpoint\napi.get('/api/friends/:id', authenticator, (req, res) => {\n  res.json(Data.getById(req.params.id))\n})\n\n//Create Post Endpoint\napi.post('/api/friends', authenticator, (req, res) => {\n  console.log(req.body);\n  res.json(Data.create(req.body))\n})\n\napi.listen(9000, () => {\n  console.log('listening on 9000')\n})\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAC9B,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,WAAW,GAAGH,OAAO,CAAC,eAAe,CAAC;AAE5C,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;AAErBK,GAAG,CAACC,GAAG,CAACN,OAAO,CAACO,IAAI,CAAC,CAAC,CAAC;AAEvBF,GAAG,CAACC,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;AAEf,MAAMK,aAAa,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EACxC,MAAM;IAAEC;EAAc,CAAC,GAAGH,GAAG,CAACI,OAAO;EACrC,MAAM;IAAEC;EAAM,CAAC,GAAGV,WAAW;EAE7B,IAAIQ,aAAa,KAAKE,KAAK,EAAE;IAC3BH,IAAI,CAAC,CAAC;EACR,CAAC,MAAM;IACLD,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACR,IAAI,CAAC;MAAES,KAAK,EAAE;IAAgC,CAAC,CAAC;EAClE;AACF,CAAC;;AAED;AACAX,GAAG,CAACY,IAAI,CAAC,YAAY,EAAE,CAACR,GAAG,EAAEC,GAAG,KAAK;EACnC,MAAM;IAAEQ,QAAQ;IAAEC,QAAQ;IAAEC,IAAI;IAAEN;EAAM,CAAC,GAAGV,WAAW;EAEvD,IAAIc,QAAQ,KAAKT,GAAG,CAACY,IAAI,CAACH,QAAQ,IAAIC,QAAQ,KAAKV,GAAG,CAACY,IAAI,CAACF,QAAQ,EAAE;IACpET,GAAG,CAACH,IAAI,CAAC;MACPW,QAAQ;MACRE,IAAI;MACJN;IACF,CAAC,CAAC;EACJ,CAAC,MAAM;IACLJ,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACR,IAAI,CAAC;MAAES,KAAK,EAAE;IAA6C,CAAC,CAAC;EAC/E;AAEF,CAAC,CAAC;AAEFX,GAAG,CAACY,IAAI,CAAC,aAAa,EAAET,aAAa,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACnD,MAAM;IAAEQ,QAAQ;IAAEE,IAAI;IAAEN;EAAM,CAAC,GAAGV,WAAW;EAC7CM,GAAG,CAACH,IAAI,CAAC;IACPW,QAAQ;IACRE,IAAI;IACJN;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFT,GAAG,CAACiB,GAAG,CAAC,cAAc,EAAEd,aAAa,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACnDA,GAAG,CAACH,IAAI,CAACL,IAAI,CAACqB,MAAM,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC;;AAEF;AACAlB,GAAG,CAACiB,GAAG,CAAC,kBAAkB,EAAEd,aAAa,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACvDA,GAAG,CAACH,IAAI,CAACL,IAAI,CAACsB,OAAO,CAACf,GAAG,CAACgB,MAAM,CAACC,EAAE,CAAC,CAAC;AACvC,CAAC,CAAC;;AAEF;AACArB,GAAG,CAACY,IAAI,CAAC,cAAc,EAAET,aAAa,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACpDiB,OAAO,CAACC,GAAG,CAACnB,GAAG,CAACY,IAAI,CAAC;EACrBX,GAAG,CAACH,IAAI,CAACL,IAAI,CAAC2B,MAAM,CAACpB,GAAG,CAACY,IAAI,CAAC,CAAC;AACjC,CAAC,CAAC;AAEFhB,GAAG,CAACyB,MAAM,CAAC,IAAI,EAAE,MAAM;EACrBH,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;AAClC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}